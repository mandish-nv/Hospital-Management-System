#include <stdio.h>
#include <stdlib.h>
#include <conio.h>	

#define MAX_QUEUE 500

int token=1;

struct patient
{
	char name[20], cause[20], emerg[3];
	char address[20], sex[10];
	int age, cont_no;
	int token;
};

struct queue
{
    struct patient pat[MAX_QUEUE];
    int front;
    int rear;
};
typedef struct queue HospitalQueue;

void registration()
{
	system("CLS");
	FILE* fptr;
	struct patient p;
	
	//append ma
    fptr = fopen("filename.txt", "w");
   	printf("REGISTRATION MENU\n\n");
	printf("Enter your NAME: ");
	scanf("%s", &p.name);
    printf("Enter your AGE: ");
    scanf("%d", &p.age);
    printf("Enter your SEX: ");
    scanf("%s", &p.sex);
    printf("Enter your ADDRESS: ");
    scanf("%s", &p.address);
    printf("Enter your CONTACT NUMBER: ");
    scanf("%d", &p.cont_no);
    fprintf(fptr, "\n%s %d %s %s %d", p.name,p.age,p.sex,p.address,p.cont_no);
    fclose(fptr);
}


void checkup(HospitalQueue *q)
{
    struct patient p;
    
    // checking if the file is opened successfully
    //if ((q->rear + 1) % MAX_QUEUE == q->front)
//    {
//        printf("QUEUE IS FULL! PLEASE WAIT.\n");
//    }
//    else
//    {
//    	if (fptr == NULL)
//	{
//        printf("FILE NOT FOUND.\n");
//    }
//    else
//    {
//    	
//    }
        //file
		printf("Enter your name: ");
		scanf("%s",&p.name);
		printf("Enter your contact number: ");
		scanf("%d",&p.cont_no);	
		//check if exists in file
		printf("Enter cause of visit: ");
		scanf("%s",&p.cause);
		printf("Is it an emergency?(Y/N) ");
		scanf("%s",&p.emerg);
		p.token=token++;
        
        q->rear = (q->rear + 1) % MAX_QUEUE;
        //??????
		q->pat[q->rear] = p;
        printf("Added to Queue\n");
    
}

void viewlist(HospitalQueue *q)
{
	int i;
	
	//Dequeue
	if (q->front == q->rear)
    {
        printf("Queue is empty\n");
    }
    else
    {
    	//timer loop?
        q->front = (q->front + 1) % MAX_QUEUE;
        printf("Call for checkup:\n");
        printf("\tToken number: %d\t\t",q->pat[q->front].token);
		printf("\tName: %s\n",q->pat[q->front].name);
    }
    
    //Display
	if (q->front == q->rear)
    {
        printf("Queue is empty\n");
    }
    else
    {
		i = (q->front + 1 ) % MAX_QUEUE;
		printf("\n\nCurrent Queue:\n");
        while (i != (q->rear + 1) % MAX_QUEUE)
        {
            printf("\tToken number: %d\t\t",q->pat[i].token);
			printf("\tName: %s\n",q->pat[i].name);
            i = (i + 1) % MAX_QUEUE;
        }
        printf("\n");
    }
    
}


int main()
{
    HospitalQueue q;
    q.front = MAX_QUEUE - 1;
    q.rear = MAX_QUEUE - 1;
    
    int option;

    do
    {
    	system("CLS");
    	printf("-------------HOSPITAL-------------\n\n");
    	printf("1. Register information\n");
		//input data and store in file and sort
    	printf("2. Enter for Checkup\n");
		//check if user exists from file and enter reason for checkup and emergency case then assign to queue with token
		//emergency lai seperate queue
    	printf("3. View Queue list\n");
    	//display queue and dequeue info with timer?
    	printf("4. Search patient information\n");
    	//use linear/binary search and display information
    	printf("5. Exit\n");
    
        printf("\nEnter Option: ");
        scanf("%d", &option);

        switch (option)
        {
        case 1:
            registration();
            getch();
            break;
        case 2:
            checkup(&q);
            getch();
			break;
        case 3:
            viewlist(&q);
            getch();
			break;
        case 4:
            //search();
            getch();
			break;
		case 5:
            printf("Exiting...\n");
            getch();
			break;
        default:
            printf("Invalid Choice\n");
            getch();
			break;
        }
    } while (option != 5);
    return 0;
}

