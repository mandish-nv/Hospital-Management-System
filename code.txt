#include <stdio.h>
#include <stdlib.h>
#include <conio.h>	
#define MAX_QUEUE 500

int token=1;

struct patient
{
	char name[20], reg_no[10], cause[20], emerg[3];
	int token;
};

struct queue
{
    struct patient p[MAX_QUEUE];
    int front;
    int rear;
};
typedef struct queue HospitalQueue;

void checkup(HospitalQueue *q)
{
    struct patient p;
    if ((q->rear + 1) % MAX_QUEUE == q->front)
    {
        printf("QUEUE IS FULL! PLEASE WAIT.\n");
    }
    else
    {
        //file
		printf("Enter your name: ");
		scanf("%s",&p.name);
		printf("Enter your registration number: ");
		scanf("%s",&p.reg_no);	
		//check if exists in file
		printf("Enter cause of visit: ");
		scanf("%s",&p.cause);
		printf("Is it an emergency?(Y/N) ");
		scanf("%s",&p.emerg);
		p.token=token++;
        
        q->rear = (q->rear + 1) % MAX_QUEUE;
        //??????
		q->p[q->rear] = p;
        printf("Added to Queue\n");
    }
}


int main()
{
	
    HospitalQueue q;
    q.front = MAX_QUEUE - 1;
    q.rear = MAX_QUEUE - 1;
    
    int option;

    do
    {
    	system("CLS");
    	printf("-------------HOSPITAL-------------\n\n");
    	printf("1. Register information\n");
		//input data and store in file and sort
    	printf("2. Enter for Checkup\n");
		//check if user exists from file and enter reason for checkup and emergency case then assign to queue with token
		//emergency lai seperate queue
    	printf("3. View Queue list\n");
    	//display queue and dequeue info with timer?
    	printf("4. Search patient information\n");
    	//use linear/binary search and display information
    	printf("5. Exit\n");
    
        printf("\nEnter Option: ");
        scanf("%d", &option);

        switch (option)
        {
        case 1:
            //registration();
            getch();
            break;
        case 2:
            checkup(q);
            getch();
			break;
        case 3:
            //viewlist();
            getch();
			break;
        case 4:
            //search();
            getch();
			break;
		case 5:
            printf("Exiting...\n");
            getch();
			break;
        default:
            printf("Invalid Choice\n");
            getch();
			break;
        }
    } while (option != 5);
    return 0;
}


/*
void dequeue(HospitalQueue *q)
{
    if (q->front == q->rear)
    {
        printf("ERROR! Queue Underflow\n");
    }
    else
    {
        q->front = (q->front + 1) % MAX_QUEUE;
        printf("The deleted element is %d\n", q->item[q->front]);
    }
}

void display(HospitalQueue *q)
{
    if (q->front == q->rear)
    {
        printf("ERROR! Queue is empty\n");
    }
    else
    {
        printf("The elements of the queue are: ");
        int i = (q->front + 1) % MAX_QUEUE;
        while (i != (q->rear + 1) % MAX_QUEUE)
        {
            printf("%d\t", q->item[i]);
            i = (i + 1) % MAX_QUEUE;
        }
        printf("\n");
    }
}
	
*/
